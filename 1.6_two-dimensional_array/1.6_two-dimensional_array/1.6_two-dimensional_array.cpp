#include <iostream>
#include <iomanip>
using namespace std;
// заполнение двоичной матрицы по спирали
int main() {
	int n, m, y1 = 0, x1 = 0, y2 = 0, x2 = 0, k = 1;
	cin >> n >> m;
	int arr[100][100]{};
	//processing
	while (k <= n * m) {
		//по верху направо 
		for (int j = x2; j <= m - 1 - x1 && k <= n * m; j++) {
			arr[y1][j] = k++;
		}
		y1++; //убираем строчку сверху
		//по правому вниз
		for (int i = y1; i <= n - 1 - y2 && k <= n * m; i++) {
			arr[i][m - 1 - x1] = k++;
		}
		x1++; //убираем колонку справа
		//по низу влево
		for (int j = m - 1 - x1; j >= x2 && k <= n * m; j--) {
			arr[n - y1][j] = k++;
		}
		y2++; //убираем строку снизу
		//по левому вверх
		for (int i = n - 1 - y2; i >= y1 && k <= n * m; i--) {
			arr[i][x1 - 1] = k++;
		}
		x2++; // убираем колонку слева
	}
	// print 
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << setw(4) << arr[i][j];
		}
		cout << endl;
	}
	return 0;
}


/*игра "Сапёр"

int main() {
	int n, m;
	cin >> n >> m;
	int mines[102][102];
	for (int i = 0; i <= n + 1; i++) {
		for (int j = 0; j <= m + 1; j++) {
			mines[i][j] = 0;
		}
	}
	//read
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			cin >> mines[i][j];
		}
	}
	//заполнение поля
	int ans[102][102];
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			//координаты соседей(сдвиги)
			int dx[8]{ 1, 1, 1, 0, 0, -1, -1, -1 };
			int dy[8]{ -1, 0, 1, -1, 1, -1, 0, 1 }; // 0, 1, -1
			int temp = 0;
			//перебор соседей
			for (int k = 0; k < 8; k++) {
				temp += mines[i + dy[k]][j + dx[k]];
			}
			ans[i][j] = temp;
		}
	}
	//print
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			if (mines[i][j] == 1) cout << "*";
			else cout << ans[i][j];
		}
		cout << endl;
	}
}
*/
/*
1. Дано нечетное число n, не превосходящее 15. Создайте двумерный массив из n×n элементов, заполнив его символами "."
	(каждый элемент массива является строкой из одного символа). Затем заполните символами "*" среднюю строку массива,
	средний столбец массива, главную диагональ и побочную диагональ. В результате "*" в массиве должны образовывать
	изображение звездочки. Выведите полученный массив на экран, разделяя элементы массива пробелами.
	int n;
	cin >> n;
	char a[15][15]{};
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++) {
			a[i][j] = '.';
			if ((n == i * 2 + 1)		//рисует середину по вертикали
				or (n == j * 2 + 1)		//рисует середину по горизонту
				or i == j				//диагональ
				or (i == n - j - 1))	//обратная диагональ
				a[i][j] = '*';
			cout << a[i][j] << " ";
		}
		cout << endl;
	}
2. Дано число n, не превышающее 100. Создайте массив размером n×n и заполните его по следующему правилу.
	На главной диагонали должны быть записаны числа 0. На двух диагоналях, прилегающих к главной, числа 1.
	На следующих двух диагоналях числа 2, и т.д. Выведите полученный массив на экран, разделяя элементы массива пробелами.
	int n;
	cin >> n;
	int a[100][100]{};
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++) {
			if (i == j) { cout << "0" << " "; }
			else if (abs(i - j) != 0) { cout << abs(i - j) << " "; }
		}
	cout << endl;
____не моё____
	#include <iostream>
	#define MAX_ARR_SIZE 100
	int main() {
	  int n, arr[MAX_ARR_SIZE][MAX_ARR_SIZE];
	  std::cin >> n;
	  for (int i = 0; i < (n+1)/2; ++i)
		  for (int j = i; j < n-i; ++j)
			  arr[i][j] = arr[n-i-1][n-1-j] =
			  arr[j][i] = arr[n-1-j][n-1-i] = (j-i);

	  for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				std::cout << arr[i][j] << " ";
			}
			std::cout << '\n';
		}
3. Дано число n, не превосходящее 10, и массив размером n × n. Проверьте, является ли этот массив симметричным относительно
	главной диагонали. Выведите слово “YES”, если массив симметричный, и слово “NO” в противном случае.
	int n, k = 0;
	cin >> n;
	int a[10][10]{};
	//reading
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> a[i][j];
		}
	}
	//processing
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (i == j) continue;
			else if (a[i][j] != a[j][i]) {k++; break;}
		}
		if (k > 0) break;
	}
	if (k) cout << "NO";
	else cout << "YES";
4. По данным числам n и m заполните двумерный массив размером n×m числами от 1 до n×m “диагоналями”, как показано в примере.

		++++ https://stepik.org/lesson/13026/step/13?unit=4378 - обязательно для полного разбора

	int n, m, k = 1;
	cin >> n >> m;
	int a[100][100]{};
	for (int d = 0; d <= m + n - 1; d++) { //кол-во диагоналей
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (i == d - j) { a[i][j] = k; k++; }
			}
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << setw(4) << a[i][j];
		}
		cout << endl;
	}
5. По данным числам n и m заполните двумерный массив размером n×m числами от 1 до n×m по спирали, выходящей из левого верхнего угла
	и закрученной по часовой стрелке, как показано в примере.
	Sample Input:
	4 5
	Sample Output:             cout.width(4); cout << a[i][j];			or			cout << setw(4) << a[i][j];
	   1   2   3   4   5
	  14  15  16  17   6
	  13  20  19  18   7
	  12  11  10   9   8
	int n, m, y1 = 0, x1 = 0, y2 = 0, x2 = 0, k = 1;
	cin >> n >> m;
	int arr[100][100]{};
	//processing
	while (k <= n * m) {
		//по верху направо
		for (int j = x2; j <= m - 1 - x1 && k <= n * m; j++) {
			arr[y1][j] = k++;
		}
		y1++; //убираем строчку сверху
		//по правому вниз
		for (int i = y1; i <= n - 1 - y2 && k <= n * m; i++) {
			arr[i][m - 1 - x1] = k++;
		}
		x1++; //убираем колонку справа
		//по низу влево
		for (int j = m - 1 - x1; j >= x2 && k <= n * m; j--) {
			arr[n - y1][j] = k++;
		}
		y2++; //убираем строку снизу
		//по левому вверх
		for (int i = n - 1 - y2; i >= y1 && k <= n * m; i--) {
			arr[i][x1 - 1] = k++;
		}
		x2++; // убираем колонку слева
	}
	// print
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << setw(4) << arr[i][j];
		}
		cout << endl;
	}
*/